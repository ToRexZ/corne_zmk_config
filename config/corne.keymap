/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | ENT  |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | SHFT |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | BKSP | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp RET
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp RSHFT 
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 2 &kp SPACE   &kp BSPC &mo 1 &kp LALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | ENT  |
// |      |     |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
// | CTRL |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | BKSP|     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5     &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &trans
   &trans     &trans       &trans       &trans       &trans       &trans     &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LCTRL  &trans       &trans       &trans       &trans       &trans     &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp BSPC &trans   &kp LALT
                        >;
                };

// Previous raise layer 
//                 raise_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | ENT  |
// // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
// //                    | GUI |     | SPC |   | BKSP|     | ALT |
//                         bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp RET
//    &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
//    &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
//                              &kp LGUI &trans   &kp SPACE   &kp BSPC  &trans    &kp LALT
//                         >;
//                 };

// New raise layer 
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |     |  @  |  #  |  $  |  (  |   |  )  |  &  |  *  |  +  |  =  | ENT  |
// | SHFT |     |  !  |  '  |  %  |  [  |   |  ]  |  -  |  _  |  ^  |  \  | SHFT |
// | CTRL |     |     |  `  | "|" |  {  |   |  }  |  ~  |     |     |     | ESC  |
//                    | GUI |     | SPC |   | BKSP|     | ALT |
                        bindings = <
   &kp  TAB  &trans   &kp AT   &kp HASH  &kp DLLR    &kp LPAR    &kp RPAR &kp AMPS  &kp KP_MULTIPLY &kp PLUS  &kp EQUAL &trans
   &kp LSHFT &trans   &kp EXCL &kp SQT   &kp PERCENT &kp LBKT    &kp RBKT &kp MINUS &kp UNDER        &kp CARET &kp BSLH  &trans 
   &kp LCTRL &trans   &trans   &kp GRAVE &kp PIPE    &kp LBRC    &kp RBRC &kp TILDE &trans          &trans    &trans    &trans 
                             &kp LGUI &trans   &kp SPACE   &kp BSPC  &trans    &kp LALT
                        >;
                };
                tri_layer {
// -----------------------------------------------------------------------------------------
// | TAB  | CLR |      |      |      |     |   |      |     |     |     |     | ENT  |
// | SHFT | BT 1| BT 2 | BT 3 | BT 4 |     |   |      |     |     |     |     |      |
// | CTRL |     |      |      |      |     |   |      |     |     |     |     |      |
//                     | GUI  |      | SPC |   | BKSP |     | ALT |
                        bindings = <
   &kp TAB   &bt BT_CLR   &trans       &trans       &trans       &trans         &kp C_VOL_DN &kp C_VOL_UP &trans   &trans   &trans   &kp RET
   &bt LSHFT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans       &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT &trans   &trans
   &kp LCTRL &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans   &trans   &trans   &trans
                                       &kp LGUI     &trans       &kp SPACE      &kp BSPC &trans   &kp LALT
                        >;
                };

        };


        // behaviors {
        //         compatible = "zmk,behaviors";

        //         // Behavior for simultaneous key press of both layer keys.
        //         third_layer_combination {
        //                 type = "zmk,key-combination";
        //                 keys = <&mo 1 &mo 2>; // Layer keys
        //                 timeout-ms = <100>;
        //                 target = <&mo 3>; // Third layer
        //         };
        // };

        // combos {
        //         compatible = "zmk,combos";

        //         // Behavior for simultaneous key press of both layer keys.
        //         combo_third_layer {
        //                 timeout-ms = <100>;
        //                 key-positions = <&mo 1 &mo 2>; // Layer keys
        //                 bindings = <&mo 3>; // Third layer
        //         };
        // };

        conditional_layers {
                compatible = "zmk,conditional-layers";

                // Behavior for simultaneous key press of both layer keys.
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        }; 
};
/*  */